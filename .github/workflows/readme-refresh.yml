# .github/workflows/live-stats-update.yml
name: Live Stats Update

on:
  schedule:
    - cron: "*/30 * * * *"   # Every 30 minutes
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:
    types: [ opened, synchronize, closed ]

jobs:
  update-stats:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Real-time GitHub Stats
        id: get-stats
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USER_LOGIN: ${{ github.repository_owner }}
        run: |
          # Use simpler error handling
          set -e
          
          echo "Fetching real-time stats for $USER_LOGIN..."
          
          # Check if required tools are available
          if ! command -v jq &> /dev/null; then
            echo "jq is not available, installing..."
            sudo apt-get update && sudo apt-get install -y jq
          fi
          
          # GraphQL query to get comprehensive stats
          cat > query.graphql <<'EOF'
          query($login:String!) {
            user(login: $login) {
              login
              name
              followers {
                totalCount
              }
              repositories(first: 100, isFork: false) {
                totalCount
                nodes {
                  stargazerCount
                  forkCount
                }
              }
              contributionsCollection {
                totalCommitContributions
                totalIssueContributions
                totalPullRequestContributions
                contributionCalendar {
                  totalContributions
                }
              }
              pullRequests(first: 100) {
                totalCount
              }
              issues(first: 100) {
                totalCount
              }
            }
          }
          EOF

          # Create JSON payload
          JSON=$(jq -n --arg login "$USER_LOGIN" '{query: $slurp, variables: {login:$login}}' --slurpfile slurp query.graphql)

          # Call GitHub GraphQL API
          echo "Calling GitHub GraphQL API..."
          RESP=$(curl -sS -H "Authorization: bearer $GH_TOKEN" -H "Content-Type: application/json" \
            -d "$JSON" https://api.github.com/graphql)

          # Check if API call was successful
          if [[ $? -ne 0 ]]; then
            echo "Failed to fetch GitHub data"
            exit 1
          fi

          # Check for GraphQL errors
          if echo "$RESP" | jq -e '.errors' > /dev/null 2>&1; then
            echo "GraphQL errors found:"
            echo "$RESP" | jq -r '.errors[].message'
            exit 1
          fi

          # Extract stats with error handling
          TOTAL_COMMITS=$(echo "$RESP" | jq -r '.data.user.contributionsCollection.totalCommitContributions // 0')
          TOTAL_ISSUES=$(echo "$RESP" | jq -r '.data.user.contributionsCollection.totalIssueContributions // 0')
          TOTAL_PRS=$(echo "$RESP" | jq -r '.data.user.contributionsCollection.totalPullRequestContributions // 0')
          TOTAL_REPOS=$(echo "$RESP" | jq -r '.data.user.repositories.totalCount // 0')
          TOTAL_STARS=$(echo "$RESP" | jq -r '.data.user.repositories.nodes | map(.stargazerCount) | add // 0')
          TOTAL_FOLLOWERS=$(echo "$RESP" | jq -r '.data.user.followers.totalCount // 0')
          TOTAL_CONTRIBUTIONS=$(echo "$RESP" | jq -r '.data.user.contributionsCollection.contributionCalendar.totalContributions // 0')
          
          # Get current year contributions
          YEAR=$(date -u +%Y)
          FROM_YTD="${YEAR}-01-01T00:00:00Z"
          TO_NOW="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          
          # Query for YTD contributions
          cat > ytd_query.graphql <<'EOF'
          query($login:String!, $from:DateTime!, $to:DateTime!) {
            user(login: $login) {
              contributionsCollection(from:$from, to:$to) {
                contributionCalendar { totalContributions }
              }
            }
          }
          EOF
          
          YTD_JSON=$(jq -n --arg login "$USER_LOGIN" --arg from "$FROM_YTD" --arg to "$TO_NOW" \
            '{query: $slurp, variables: {login:$login, from:$from, to:$to}}' --slurpfile slurp ytd_query.graphql)
          
          echo "Fetching YTD contributions..."
          YTD_RESP=$(curl -sS -H "Authorization: bearer $GH_TOKEN" -H "Content-Type: application/json" \
            -d "$YTD_JSON" https://api.github.com/graphql)
          
          YTD_CONTRIBUTIONS=$(echo "$YTD_RESP" | jq -r '.data.user.contributionsCollection.contributionCalendar.totalContributions // 0')

          echo "Stats extracted successfully:"
          echo "Total Commits: $TOTAL_COMMITS"
          echo "Total Issues: $TOTAL_ISSUES"
          echo "Total PRs: $TOTAL_PRS"
          echo "Total Repos: $TOTAL_REPOS"
          echo "Total Stars: $TOTAL_STARS"
          echo "Total Followers: $TOTAL_FOLLOWERS"
          echo "Total Contributions: $TOTAL_CONTRIBUTIONS"
          echo "YTD Contributions: $YTD_CONTRIBUTIONS"

          # Set outputs for next step
          echo "total_commits=$TOTAL_COMMITS" >> $GITHUB_OUTPUT
          echo "total_issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
          echo "total_prs=$TOTAL_PRS" >> $GITHUB_OUTPUT
          echo "total_repos=$TOTAL_REPOS" >> $GITHUB_OUTPUT
          echo "total_stars=$TOTAL_STARS" >> $GITHUB_OUTPUT
          echo "total_followers=$TOTAL_FOLLOWERS" >> $GITHUB_OUTPUT
          echo "total_contributions=$TOTAL_CONTRIBUTIONS" >> $GITHUB_OUTPUT
          echo "ytd_contributions=$YTD_CONTRIBUTIONS" >> $GITHUB_OUTPUT

          # Create stats summary
          cat > stats_summary.md <<EOF
          # Real-time GitHub Stats for $USER_LOGIN
          
          **Last Updated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          ## ðŸ“Š Current Stats
          - **Total Commits**: $TOTAL_COMMITS
          - **Total Issues**: $TOTAL_ISSUES
          - **Total Pull Requests**: $TOTAL_PRS
          - **Total Repositories**: $TOTAL_REPOS
          - **Total Stars Earned**: $TOTAL_STARS
          - **Total Followers**: $TOTAL_FOLLOWERS
          - **Total Contributions**: $TOTAL_CONTRIBUTIONS
          - **Contributions This Year**: $YTD_CONTRIBUTIONS
          
          ## Quick Stats Badges
          ![Commits](https://img.shields.io/badge/Commits-$TOTAL_COMMITS-FF6BD6?style=for-the-badge&logo=github&logoColor=white)
          ![Issues](https://img.shields.io/badge/Issues-$TOTAL_ISSUES-8B5CF6?style=for-the-badge&logo=github&logoColor=white)
          ![PRs](https://img.shields.io/badge/Pull%20Requests-$TOTAL_PRS-22C55E?style=for-the-badge&logo=github&logoColor=white)
          ![Stars](https://img.shields.io/badge/Stars-$TOTAL_STARS-F59E0B?style=for-the-badge&logo=github&logoColor=white)
          ![Contributions](https://img.shields.io/badge/Contributions-$TOTAL_CONTRIBUTIONS-EF4444?style=for-the-badge&logo=github&logoColor=white)
          EOF

      - name: Update README with Live Stats
        run: |
          set -e
          
          # Get stats from previous step
          TOTAL_COMMITS="${{ steps.get-stats.outputs.total_commits }}"
          TOTAL_ISSUES="${{ steps.get-stats.outputs.total_issues }}"
          TOTAL_PRS="${{ steps.get-stats.outputs.total_prs }}"
          TOTAL_REPOS="${{ steps.get-stats.outputs.total_repos }}"
          TOTAL_STARS="${{ steps.get-stats.outputs.total_stars }}"
          TOTAL_FOLLOWERS="${{ steps.get-stats.outputs.total_followers }}"
          TOTAL_CONTRIBUTIONS="${{ steps.get-stats.outputs.total_contributions }}"
          YTD_CONTRIBUTIONS="${{ steps.get-stats.outputs.ytd_contributions }}"
          
          echo "Updating README with:"
          echo "Total Commits: $TOTAL_COMMITS"
          echo "Total Contributions: $TOTAL_CONTRIBUTIONS"
          echo "YTD Contributions: $YTD_CONTRIBUTIONS"
          
          # Update README.md with real stats
          if grep -q "<!--contrib_ytd-->" README.md; then
            sed -i "s/<!--contrib_ytd-->[0-9]*<!--\/contrib_ytd-->/<!--contrib_ytd-->$YTD_CONTRIBUTIONS<!--\/contrib_ytd-->/" README.md
            echo "Updated YTD contributions to $YTD_CONTRIBUTIONS"
          fi
          
          if grep -q "<!--contrib_total-->" README.md; then
            sed -i "s/<!--contrib_total-->[0-9]*<!--\/contrib_total-->/<!--contrib_total-->$TOTAL_CONTRIBUTIONS<!--\/contrib_total-->/" README.md
            echo "Updated total contributions to $TOTAL_CONTRIBUTIONS"
          fi
          
          # Update refresh marker
          TODAY=$(date -u +%F)
          if grep -q "<!--last_refresh-->" README.md; then
            sed -i "s/<!--last_refresh:[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}-->/<!--last_refresh:$TODAY-->/" README.md
            echo "Updated refresh marker to $TODAY"
          else
            sed -i "1s|^|<!--last_refresh:$TODAY-->\n|" README.md
            echo "Added refresh marker: $TODAY"
          fi
          
          echo "README updated with live stats"

      - name: Commit and Push Changes
        run: |
          if ! git diff --quiet; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add README.md stats_summary.md
            git commit -m "chore: update live GitHub stats [skip ci]"
            git push
            echo "Live stats updated and pushed successfully"
          else
            echo "No changes to commit"
          fi

      - name: Create Stats Summary
        run: |
          if [[ -f "stats_summary.md" ]]; then
            echo "## Live Stats Summary Created"
            cat stats_summary.md
          fi
